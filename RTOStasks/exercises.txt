A.
	1.

	2.
		a.
			Q.	Study the main.c file. How many tasks are there in the application (application=main.c in this case)?

			A.	2

		b.
			Q.	How many tasks are there in system? (system = application + OS)

			A.	

		c.
			Q.	What are the priorities of the tasks in the system? Find numerical values.

			A. 
				idle task priority is 0
				application task priority is 1

		d.
			Q.	What are scheduling policies for tasks with equal priorities? See http://www.freertos.org/RTOS-task-priority.html and file FreeRTOSConfig.h

			A.	
				Tasks with eaqual priorities will share available processing time.

B.
	1.
		a)
			Q. 	Why does FreeRTOS implement a separate dynamic memory management service instead of using C standard library services?

			A. 
				Standard c library malloc and free may not be allways awaivable in embended systems.
				They take up valuable code space and they are not thread safe.
				They are not deterministic.
				FreeRTOS separate implemented dynamic memory management services are more effient than most 
				c library malloc implementations, because they are made for specific purpose, but standard
				functions are made to be more generic.

		b)
			Q. 	Why is Heap_1.c implementation particularly suitable for embedded real-time systems?

			A. 	In many embended real-time systems memory allocations are done in system boot 
				so this means that there is no need to delete task, queue, semaphore, mutex, etc.
				This makes code allways deterministic and total code size can be smaller.

	2.
		a)
			Q. 	What is the RAM start address (tagged by "PROVIDE (__data_start, .)") ? This should be equal to RAM start address in CPU data sheet, verify.

			A. 	0x00800100

		b)
			Q. 	How much RAM space is required by initialised variables? This is the space between start above and tag "PROVIDE (__data_end, .)"

			A. 
				0x00800100 - 0x0080010c		
				12 bytes

		c)
			Q. 	What is the total RAM usage of your program? This is the space between start above and tag "PROVIDE (__bss_end, .)"

			A. 
				0x00800100 - 0x0080054b
				1091 bytes

		d)
			Q. 	What is space allocated for heap? This can be found as total allocation module "heap_1.o" in .bss segment.

			A.	1949

		e)
			Q. How much free RAM you have?

			A.	2049 - 1949 = 99 bytes

	3.
		Q. 	In your FreeRTOS application, you can check the actual heap usage after you have created all RTOS objects, 
			as described in memory management documentation: "The xPortGetFreeHeapSize() API function returns the total amount of heap space that remains unallocated, 
			allowing the configTOTAL_HEAP_SIZE setting to be optimised." 
			How much free heap space you have in the demo (append to file "exercises.txt" and commit)?

		A. 	413 bytes