
freertos_problem1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000c0c  00000ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000441  0080010c  0080010c  00000cac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002544  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d96  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b4  00000000  00000000  000041e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  0000559c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d95  00000000  00000000  00005ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cbf  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 34       	cpi	r26, 0x4D	; 77
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  9e:	0c 94 04 06 	jmp	0xc08	; 0xc08 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ac:	0e 94 4a 04 	call	0x894	; 0x894 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  b4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	31 f4       	brne	.+12     	; 0xc8 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  bc:	81 e1       	ldi	r24, 0x11	; 17
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
  c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  c8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <xNextFreeByte>
  cc:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <xNextFreeByte+0x1>
  d0:	ce 01       	movw	r24, r28
  d2:	82 0f       	add	r24, r18
  d4:	93 1f       	adc	r25, r19
  d6:	87 3e       	cpi	r24, 0xE7	; 231
  d8:	43 e0       	ldi	r20, 0x03	; 3
  da:	94 07       	cpc	r25, r20
  dc:	70 f4       	brcc	.+28     	; 0xfa <pvPortMalloc+0x54>
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	70 f4       	brcc	.+28     	; 0x100 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  e4:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <__data_end>
  e8:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <__data_end+0x1>
  ec:	c2 0f       	add	r28, r18
  ee:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
  f0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <xNextFreeByte+0x1>
  f4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <xNextFreeByte>
  f8:	05 c0       	rjmp	.+10     	; 0x104 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <pvPortMalloc+0x5e>
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 104:	0e 94 0b 05 	call	0xa16	; 0xa16 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	9c 01       	movw	r18, r24
 13c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 13e:	dc 01       	movw	r26, r24
 140:	11 96       	adiw	r26, 0x01	; 1
 142:	cd 91       	ld	r28, X+
 144:	dc 91       	ld	r29, X
 146:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 148:	d3 83       	std	Z+3, r29	; 0x03
 14a:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 14c:	8c 81       	ldd	r24, Y+4	; 0x04
 14e:	9d 81       	ldd	r25, Y+5	; 0x05
 150:	95 83       	std	Z+5, r25	; 0x05
 152:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 154:	8c 81       	ldd	r24, Y+4	; 0x04
 156:	9d 81       	ldd	r25, Y+5	; 0x05
 158:	dc 01       	movw	r26, r24
 15a:	13 96       	adiw	r26, 0x03	; 3
 15c:	7c 93       	st	X, r23
 15e:	6e 93       	st	-X, r22
 160:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 166:	31 87       	std	Z+9, r19	; 0x09
 168:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 16a:	f9 01       	movw	r30, r18
 16c:	80 81       	ld	r24, Z
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 83       	st	Z, r24
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 17e:	48 81       	ld	r20, Y
 180:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 182:	4f 3f       	cpi	r20, 0xFF	; 255
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	52 07       	cpc	r21, r18
 188:	21 f4       	brne	.+8      	; 0x192 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 18a:	fc 01       	movw	r30, r24
 18c:	a7 81       	ldd	r26, Z+7	; 0x07
 18e:	b0 85       	ldd	r27, Z+8	; 0x08
 190:	0d c0       	rjmp	.+26     	; 0x1ac <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 192:	dc 01       	movw	r26, r24
 194:	13 96       	adiw	r26, 0x03	; 3
 196:	01 c0       	rjmp	.+2      	; 0x19a <vListInsert+0x22>
 198:	df 01       	movw	r26, r30
 19a:	12 96       	adiw	r26, 0x02	; 2
 19c:	ed 91       	ld	r30, X+
 19e:	fc 91       	ld	r31, X
 1a0:	13 97       	sbiw	r26, 0x03	; 3
 1a2:	20 81       	ld	r18, Z
 1a4:	31 81       	ldd	r19, Z+1	; 0x01
 1a6:	42 17       	cp	r20, r18
 1a8:	53 07       	cpc	r21, r19
 1aa:	b0 f7       	brcc	.-20     	; 0x198 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ac:	12 96       	adiw	r26, 0x02	; 2
 1ae:	ed 91       	ld	r30, X+
 1b0:	fc 91       	ld	r31, X
 1b2:	13 97       	sbiw	r26, 0x03	; 3
 1b4:	fb 83       	std	Y+3, r31	; 0x03
 1b6:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1b8:	d5 83       	std	Z+5, r29	; 0x05
 1ba:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1bc:	bd 83       	std	Y+5, r27	; 0x05
 1be:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1c0:	13 96       	adiw	r26, 0x03	; 3
 1c2:	dc 93       	st	X, r29
 1c4:	ce 93       	st	-X, r28
 1c6:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1c8:	99 87       	std	Y+9, r25	; 0x09
 1ca:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 81       	ld	r18, Z
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	20 83       	st	Z, r18
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 1e0:	a0 85       	ldd	r26, Z+8	; 0x08
 1e2:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1e4:	c2 81       	ldd	r28, Z+2	; 0x02
 1e6:	d3 81       	ldd	r29, Z+3	; 0x03
 1e8:	84 81       	ldd	r24, Z+4	; 0x04
 1ea:	95 81       	ldd	r25, Z+5	; 0x05
 1ec:	9d 83       	std	Y+5, r25	; 0x05
 1ee:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1f0:	c4 81       	ldd	r28, Z+4	; 0x04
 1f2:	d5 81       	ldd	r29, Z+5	; 0x05
 1f4:	82 81       	ldd	r24, Z+2	; 0x02
 1f6:	93 81       	ldd	r25, Z+3	; 0x03
 1f8:	9b 83       	std	Y+3, r25	; 0x03
 1fa:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1fc:	11 96       	adiw	r26, 0x01	; 1
 1fe:	cd 91       	ld	r28, X+
 200:	dc 91       	ld	r29, X
 202:	12 97       	sbiw	r26, 0x02	; 2
 204:	ce 17       	cp	r28, r30
 206:	df 07       	cpc	r29, r31
 208:	31 f4       	brne	.+12     	; 0x216 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 20a:	8c 81       	ldd	r24, Y+4	; 0x04
 20c:	9d 81       	ldd	r25, Y+5	; 0x05
 20e:	12 96       	adiw	r26, 0x02	; 2
 210:	9c 93       	st	X, r25
 212:	8e 93       	st	-X, r24
 214:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 216:	11 86       	std	Z+9, r1	; 0x09
 218:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 21a:	8c 91       	ld	r24, X
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <vWriterTask>:
{
	( void ) pvParameters;
	while(1)
	{
		shared=0x0000;
		shared=0xFFFF;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f ef       	ldi	r25, 0xFF	; 255
static void vWriterTask( void *pvParameters )
{
	( void ) pvParameters;
	while(1)
	{
		shared=0x0000;
 22a:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <shared+0x1>
 22e:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <shared>
		shared=0xFFFF;
 232:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <shared+0x1>
 236:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <shared>
	}
 23a:	f7 cf       	rjmp	.-18     	; 0x22a <vWriterTask+0x4>

0000023c <vReaderTask>:
}

static void vReaderTask( void *pvParameters )
{
	( void ) pvParameters;
	DDRD |= 0x80;
 23c:	57 9a       	sbi	0x0a, 7	; 10
				//OK
				PORTD = 0x00;
				break;
			//but, catch the following failure with breakpoint:
			default:
				PORTD = 0x80;
 23e:	c0 e8       	ldi	r28, 0x80	; 128
{
	( void ) pvParameters;
	DDRD |= 0x80;
	while(1)
	{
		switch(shared)
 240:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <shared>
 244:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <shared+0x1>
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	02 97       	sbiw	r24, 0x02	; 2
 24c:	10 f4       	brcc	.+4      	; 0x252 <vReaderTask+0x16>
		{
			//variable should be either 0x0000 or 0xFFFF
			case 0x0000:
			case 0xFFFF:
				//OK
				PORTD = 0x00;
 24e:	1b b8       	out	0x0b, r1	; 11
				break;
 250:	01 c0       	rjmp	.+2      	; 0x254 <vReaderTask+0x18>
			//but, catch the following failure with breakpoint:
			default:
				PORTD = 0x80;
 252:	cb b9       	out	0x0b, r28	; 11
				break;
		}
		vTaskDelay( 1 );
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 8a 05 	call	0xb14	; 0xb14 <vTaskDelay>
	}
 25c:	f1 cf       	rjmp	.-30     	; 0x240 <vReaderTask+0x4>

0000025e <main>:

static void vWriterTask( void *pvParameters );
static void vReaderTask( void *pvParameters );

int main( void )
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
    // create tasks and start scheduler
	xTaskCreate( vWriterTask, ( const char * ) "T1", 255, (void *)('1'), WRITER_TASK_PRIORITY, NULL );
 264:	e1 2c       	mov	r14, r1
 266:	f1 2c       	mov	r15, r1
 268:	01 e0       	ldi	r16, 0x01	; 1
 26a:	21 e3       	ldi	r18, 0x31	; 49
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	4f ef       	ldi	r20, 0xFF	; 255
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	71 e0       	ldi	r23, 0x01	; 1
 276:	83 e1       	ldi	r24, 0x13	; 19
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 1c 03 	call	0x638	; 0x638 <xTaskCreate>
	xTaskCreate( vReaderTask, ( const char * ) "T2", 255, (void *)('2'), READER_TASK_PRIORITY, NULL );
 27e:	02 e0       	ldi	r16, 0x02	; 2
 280:	22 e3       	ldi	r18, 0x32	; 50
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	4f ef       	ldi	r20, 0xFF	; 255
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	71 e0       	ldi	r23, 0x01	; 1
 28c:	8e e1       	ldi	r24, 0x1E	; 30
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 1c 03 	call	0x638	; 0x638 <xTaskCreate>
	vTaskStartScheduler();
 294:	0e 94 20 04 	call	0x840	; 0x840 <vTaskStartScheduler>
	return 0;
}
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2a4:	31 e1       	ldi	r19, 0x11	; 17
 2a6:	fc 01       	movw	r30, r24
 2a8:	30 83       	st	Z, r19
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	22 e2       	ldi	r18, 0x22	; 34
 2ae:	20 83       	st	Z, r18
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	a3 e3       	ldi	r26, 0x33	; 51
 2b4:	a0 83       	st	Z, r26
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	60 83       	st	Z, r22
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	70 83       	st	Z, r23
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	10 82       	st	Z, r1
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	60 e8       	ldi	r22, 0x80	; 128
 2c6:	60 83       	st	Z, r22
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	10 82       	st	Z, r1
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	60 83       	st	Z, r22
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	63 e0       	ldi	r22, 0x03	; 3
 2d6:	60 83       	st	Z, r22
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	60 83       	st	Z, r22
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	60 83       	st	Z, r22
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	66 e0       	ldi	r22, 0x06	; 6
 2e8:	60 83       	st	Z, r22
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	67 e0       	ldi	r22, 0x07	; 7
 2ee:	60 83       	st	Z, r22
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	68 e0       	ldi	r22, 0x08	; 8
 2f4:	60 83       	st	Z, r22
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	69 e0       	ldi	r22, 0x09	; 9
 2fa:	60 83       	st	Z, r22
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	60 83       	st	Z, r22
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	30 83       	st	Z, r19
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	32 e1       	ldi	r19, 0x12	; 18
 30a:	30 83       	st	Z, r19
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	33 e1       	ldi	r19, 0x13	; 19
 310:	30 83       	st	Z, r19
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	34 e1       	ldi	r19, 0x14	; 20
 316:	30 83       	st	Z, r19
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	35 e1       	ldi	r19, 0x15	; 21
 31c:	30 83       	st	Z, r19
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	36 e1       	ldi	r19, 0x16	; 22
 322:	30 83       	st	Z, r19
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	37 e1       	ldi	r19, 0x17	; 23
 328:	30 83       	st	Z, r19
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	38 e1       	ldi	r19, 0x18	; 24
 32e:	30 83       	st	Z, r19
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	39 e1       	ldi	r19, 0x19	; 25
 334:	30 83       	st	Z, r19
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	30 e2       	ldi	r19, 0x20	; 32
 33a:	30 83       	st	Z, r19
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	31 e2       	ldi	r19, 0x21	; 33
 340:	30 83       	st	Z, r19
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	20 83       	st	Z, r18
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	23 e2       	ldi	r18, 0x23	; 35
 34a:	20 83       	st	Z, r18
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	40 83       	st	Z, r20
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	50 83       	st	Z, r21
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	26 e2       	ldi	r18, 0x26	; 38
 358:	20 83       	st	Z, r18
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	27 e2       	ldi	r18, 0x27	; 39
 35e:	20 83       	st	Z, r18
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	28 e2       	ldi	r18, 0x28	; 40
 364:	20 83       	st	Z, r18
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	29 e2       	ldi	r18, 0x29	; 41
 36a:	20 83       	st	Z, r18
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	20 e3       	ldi	r18, 0x30	; 48
 370:	20 83       	st	Z, r18
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	21 e3       	ldi	r18, 0x31	; 49
 376:	20 83       	st	Z, r18
 378:	86 97       	sbiw	r24, 0x26	; 38
 37a:	08 95       	ret

0000037c <xPortStartScheduler>:
 37c:	8a e7       	ldi	r24, 0x7A	; 122
 37e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 382:	81 e1       	ldi	r24, 0x11	; 17
 384:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 388:	8b e0       	ldi	r24, 0x0B	; 11
 38a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 38e:	ef e6       	ldi	r30, 0x6F	; 111
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
 398:	a0 91 49 05 	lds	r26, 0x0549	; 0x800549 <pxCurrentTCB>
 39c:	b0 91 4a 05 	lds	r27, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 3a0:	cd 91       	ld	r28, X+
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	dd 91       	ld	r29, X+
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	bf 90       	pop	r11
 3d2:	af 90       	pop	r10
 3d4:	9f 90       	pop	r9
 3d6:	8f 90       	pop	r8
 3d8:	7f 90       	pop	r7
 3da:	6f 90       	pop	r6
 3dc:	5f 90       	pop	r5
 3de:	4f 90       	pop	r4
 3e0:	3f 90       	pop	r3
 3e2:	2f 90       	pop	r2
 3e4:	1f 90       	pop	r1
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	08 95       	ret
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret

000003f2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	0f 92       	push	r0
 3fa:	1f 92       	push	r1
 3fc:	11 24       	eor	r1, r1
 3fe:	2f 92       	push	r2
 400:	3f 92       	push	r3
 402:	4f 92       	push	r4
 404:	5f 92       	push	r5
 406:	6f 92       	push	r6
 408:	7f 92       	push	r7
 40a:	8f 92       	push	r8
 40c:	9f 92       	push	r9
 40e:	af 92       	push	r10
 410:	bf 92       	push	r11
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
 43a:	a0 91 49 05 	lds	r26, 0x0549	; 0x800549 <pxCurrentTCB>
 43e:	b0 91 4a 05 	lds	r27, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 442:	0d b6       	in	r0, 0x3d	; 61
 444:	0d 92       	st	X+, r0
 446:	0e b6       	in	r0, 0x3e	; 62
 448:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 44a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 44e:	a0 91 49 05 	lds	r26, 0x0549	; 0x800549 <pxCurrentTCB>
 452:	b0 91 4a 05 	lds	r27, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 456:	cd 91       	ld	r28, X+
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	dd 91       	ld	r29, X+
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	7f 91       	pop	r23
 470:	6f 91       	pop	r22
 472:	5f 91       	pop	r21
 474:	4f 91       	pop	r20
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	9f 90       	pop	r9
 48c:	8f 90       	pop	r8
 48e:	7f 90       	pop	r7
 490:	6f 90       	pop	r6
 492:	5f 90       	pop	r5
 494:	4f 90       	pop	r4
 496:	3f 90       	pop	r3
 498:	2f 90       	pop	r2
 49a:	1f 90       	pop	r1
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4a2:	08 95       	ret

000004a4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	0f 92       	push	r0
 4ac:	1f 92       	push	r1
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 92       	push	r2
 4b2:	3f 92       	push	r3
 4b4:	4f 92       	push	r4
 4b6:	5f 92       	push	r5
 4b8:	6f 92       	push	r6
 4ba:	7f 92       	push	r7
 4bc:	8f 92       	push	r8
 4be:	9f 92       	push	r9
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
 4ec:	a0 91 49 05 	lds	r26, 0x0549	; 0x800549 <pxCurrentTCB>
 4f0:	b0 91 4a 05 	lds	r27, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 4f4:	0d b6       	in	r0, 0x3d	; 61
 4f6:	0d 92       	st	X+, r0
 4f8:	0e b6       	in	r0, 0x3e	; 62
 4fa:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 4fc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <xTaskIncrementTick>
 500:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 502:	0e 94 9e 05 	call	0xb3c	; 0xb3c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 506:	a0 91 49 05 	lds	r26, 0x0549	; 0x800549 <pxCurrentTCB>
 50a:	b0 91 4a 05 	lds	r27, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 50e:	cd 91       	ld	r28, X+
 510:	cd bf       	out	0x3d, r28	; 61
 512:	dd 91       	ld	r29, X+
 514:	de bf       	out	0x3e, r29	; 62
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	bf 91       	pop	r27
 520:	af 91       	pop	r26
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	7f 91       	pop	r23
 528:	6f 91       	pop	r22
 52a:	5f 91       	pop	r21
 52c:	4f 91       	pop	r20
 52e:	3f 91       	pop	r19
 530:	2f 91       	pop	r18
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	bf 90       	pop	r11
 540:	af 90       	pop	r10
 542:	9f 90       	pop	r9
 544:	8f 90       	pop	r8
 546:	7f 90       	pop	r7
 548:	6f 90       	pop	r6
 54a:	5f 90       	pop	r5
 54c:	4f 90       	pop	r4
 54e:	3f 90       	pop	r3
 550:	2f 90       	pop	r2
 552:	1f 90       	pop	r1
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0

	asm volatile ( "ret" );
 55a:	08 95       	ret

0000055c <__vector_11>:
	 * the context is saved at the start of vPortYieldFromTick().  The tick
	 * count is incremented after the context is saved.
	 */
	ISR(TIMER1_COMPA_vect , ISR_NAKED )
	{
		vPortYieldFromTick();
 55c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vPortYieldFromTick>
		asm volatile ( "reti" );
 560:	18 95       	reti

00000562 <prvResetNextTaskUnblockTime>:
	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
}
 562:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <pxDelayedTaskList>
 566:	f0 91 12 05 	lds	r31, 0x0512	; 0x800512 <pxDelayedTaskList+0x1>
 56a:	80 81       	ld	r24, Z
 56c:	81 11       	cpse	r24, r1
 56e:	07 c0       	rjmp	.+14     	; 0x57e <prvResetNextTaskUnblockTime+0x1c>
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	9f ef       	ldi	r25, 0xFF	; 255
 574:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <xNextTaskUnblockTime+0x1>
 578:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <xNextTaskUnblockTime>
 57c:	08 95       	ret
 57e:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <pxDelayedTaskList>
 582:	f0 91 12 05 	lds	r31, 0x0512	; 0x800512 <pxDelayedTaskList+0x1>
 586:	05 80       	ldd	r0, Z+5	; 0x05
 588:	f6 81       	ldd	r31, Z+6	; 0x06
 58a:	e0 2d       	mov	r30, r0
 58c:	06 80       	ldd	r0, Z+6	; 0x06
 58e:	f7 81       	ldd	r31, Z+7	; 0x07
 590:	e0 2d       	mov	r30, r0
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <xNextTaskUnblockTime+0x1>
 59a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <xNextTaskUnblockTime>
 59e:	08 95       	ret

000005a0 <prvIdleTask>:
 5a0:	c5 e2       	ldi	r28, 0x25	; 37
 5a2:	d5 e0       	ldi	r29, 0x05	; 5
 5a4:	88 81       	ld	r24, Y
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	f0 f3       	brcs	.-4      	; 0x5a6 <prvIdleTask+0x6>
 5aa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <vPortYield>
 5ae:	fa cf       	rjmp	.-12     	; 0x5a4 <prvIdleTask+0x4>

000005b0 <prvAddCurrentTaskToDelayedList>:
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	ec 01       	movw	r28, r24
 5ba:	00 91 03 05 	lds	r16, 0x0503	; 0x800503 <xTickCount>
 5be:	10 91 04 05 	lds	r17, 0x0504	; 0x800504 <xTickCount+0x1>
 5c2:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pxCurrentTCB>
 5c6:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 5ca:	02 96       	adiw	r24, 0x02	; 2
 5cc:	0e 94 ed 00 	call	0x1da	; 0x1da <uxListRemove>
 5d0:	c0 0f       	add	r28, r16
 5d2:	d1 1f       	adc	r29, r17
 5d4:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxCurrentTCB>
 5d8:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 5dc:	d3 83       	std	Z+3, r29	; 0x03
 5de:	c2 83       	std	Z+2, r28	; 0x02
 5e0:	c0 17       	cp	r28, r16
 5e2:	d1 07       	cpc	r29, r17
 5e4:	68 f4       	brcc	.+26     	; 0x600 <prvAddCurrentTaskToDelayedList+0x50>
 5e6:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <pxCurrentTCB>
 5ea:	70 91 4a 05 	lds	r23, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 5ee:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <pxOverflowDelayedTaskList>
 5f2:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <pxOverflowDelayedTaskList+0x1>
 5f6:	6e 5f       	subi	r22, 0xFE	; 254
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	0e 94 bc 00 	call	0x178	; 0x178 <vListInsert>
 5fe:	17 c0       	rjmp	.+46     	; 0x62e <prvAddCurrentTaskToDelayedList+0x7e>
 600:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <pxCurrentTCB>
 604:	70 91 4a 05 	lds	r23, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 608:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <pxDelayedTaskList>
 60c:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <pxDelayedTaskList+0x1>
 610:	6e 5f       	subi	r22, 0xFE	; 254
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	0e 94 bc 00 	call	0x178	; 0x178 <vListInsert>
 618:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <xNextTaskUnblockTime>
 61c:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <xNextTaskUnblockTime+0x1>
 620:	c8 17       	cp	r28, r24
 622:	d9 07       	cpc	r29, r25
 624:	20 f4       	brcc	.+8      	; 0x62e <prvAddCurrentTaskToDelayedList+0x7e>
 626:	d0 93 fc 04 	sts	0x04FC, r29	; 0x8004fc <xNextTaskUnblockTime+0x1>
 62a:	c0 93 fb 04 	sts	0x04FB, r28	; 0x8004fb <xNextTaskUnblockTime>
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <xTaskCreate>:
 638:	4f 92       	push	r4
 63a:	5f 92       	push	r5
 63c:	6f 92       	push	r6
 63e:	7f 92       	push	r7
 640:	8f 92       	push	r8
 642:	9f 92       	push	r9
 644:	af 92       	push	r10
 646:	bf 92       	push	r11
 648:	cf 92       	push	r12
 64a:	df 92       	push	r13
 64c:	ef 92       	push	r14
 64e:	ff 92       	push	r15
 650:	0f 93       	push	r16
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	4c 01       	movw	r8, r24
 658:	6b 01       	movw	r12, r22
 65a:	5a 01       	movw	r10, r20
 65c:	29 01       	movw	r4, r18
 65e:	ca 01       	movw	r24, r20
 660:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
 664:	3c 01       	movw	r6, r24
 666:	89 2b       	or	r24, r25
 668:	09 f4       	brne	.+2      	; 0x66c <xTaskCreate+0x34>
 66a:	d9 c0       	rjmp	.+434    	; 0x81e <xTaskCreate+0x1e6>
 66c:	86 e2       	ldi	r24, 0x26	; 38
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 53 00 	call	0xa6	; 0xa6 <pvPortMalloc>
 674:	ec 01       	movw	r28, r24
 676:	89 2b       	or	r24, r25
 678:	71 f0       	breq	.+28     	; 0x696 <xTaskCreate+0x5e>
 67a:	78 8e       	std	Y+24, r7	; 0x18
 67c:	6f 8a       	std	Y+23, r6	; 0x17
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	a8 1a       	sub	r10, r24
 682:	b1 08       	sbc	r11, r1
 684:	6a 0c       	add	r6, r10
 686:	7b 1c       	adc	r7, r11
 688:	d6 01       	movw	r26, r12
 68a:	8c 91       	ld	r24, X
 68c:	89 8f       	std	Y+25, r24	; 0x19
 68e:	8c 91       	ld	r24, X
 690:	81 11       	cpse	r24, r1
 692:	05 c0       	rjmp	.+10     	; 0x69e <xTaskCreate+0x66>
 694:	18 c0       	rjmp	.+48     	; 0x6c6 <xTaskCreate+0x8e>
 696:	c3 01       	movw	r24, r6
 698:	0e 94 88 00 	call	0x110	; 0x110 <vPortFree>
 69c:	c0 c0       	rjmp	.+384    	; 0x81e <xTaskCreate+0x1e6>
 69e:	ae 01       	movw	r20, r28
 6a0:	46 5e       	subi	r20, 0xE6	; 230
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	f6 01       	movw	r30, r12
 6a6:	31 96       	adiw	r30, 0x01	; 1
 6a8:	b8 e0       	ldi	r27, 0x08	; 8
 6aa:	cb 0e       	add	r12, r27
 6ac:	d1 1c       	adc	r13, r1
 6ae:	cf 01       	movw	r24, r30
 6b0:	21 91       	ld	r18, Z+
 6b2:	da 01       	movw	r26, r20
 6b4:	2d 93       	st	X+, r18
 6b6:	ad 01       	movw	r20, r26
 6b8:	dc 01       	movw	r26, r24
 6ba:	8c 91       	ld	r24, X
 6bc:	88 23       	and	r24, r24
 6be:	19 f0       	breq	.+6      	; 0x6c6 <xTaskCreate+0x8e>
 6c0:	ec 15       	cp	r30, r12
 6c2:	fd 05       	cpc	r31, r13
 6c4:	a1 f7       	brne	.-24     	; 0x6ae <xTaskCreate+0x76>
 6c6:	18 a2       	std	Y+32, r1	; 0x20
 6c8:	04 30       	cpi	r16, 0x04	; 4
 6ca:	08 f0       	brcs	.+2      	; 0x6ce <xTaskCreate+0x96>
 6cc:	03 e0       	ldi	r16, 0x03	; 3
 6ce:	0e 8b       	std	Y+22, r16	; 0x16
 6d0:	6e 01       	movw	r12, r28
 6d2:	b2 e0       	ldi	r27, 0x02	; 2
 6d4:	cb 0e       	add	r12, r27
 6d6:	d1 1c       	adc	r13, r1
 6d8:	c6 01       	movw	r24, r12
 6da:	0e 94 97 00 	call	0x12e	; 0x12e <vListInitialiseItem>
 6de:	ce 01       	movw	r24, r28
 6e0:	0c 96       	adiw	r24, 0x0c	; 12
 6e2:	0e 94 97 00 	call	0x12e	; 0x12e <vListInitialiseItem>
 6e6:	d9 87       	std	Y+9, r29	; 0x09
 6e8:	c8 87       	std	Y+8, r28	; 0x08
 6ea:	84 e0       	ldi	r24, 0x04	; 4
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	80 1b       	sub	r24, r16
 6f0:	91 09       	sbc	r25, r1
 6f2:	9d 87       	std	Y+13, r25	; 0x0d
 6f4:	8c 87       	std	Y+12, r24	; 0x0c
 6f6:	db 8b       	std	Y+19, r29	; 0x13
 6f8:	ca 8b       	std	Y+18, r28	; 0x12
 6fa:	19 a2       	std	Y+33, r1	; 0x21
 6fc:	1a a2       	std	Y+34, r1	; 0x22
 6fe:	1b a2       	std	Y+35, r1	; 0x23
 700:	1c a2       	std	Y+36, r1	; 0x24
 702:	1d a2       	std	Y+37, r1	; 0x25
 704:	a2 01       	movw	r20, r4
 706:	b4 01       	movw	r22, r8
 708:	c3 01       	movw	r24, r6
 70a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <pxPortInitialiseStack>
 70e:	99 83       	std	Y+1, r25	; 0x01
 710:	88 83       	st	Y, r24
 712:	e1 14       	cp	r14, r1
 714:	f1 04       	cpc	r15, r1
 716:	19 f0       	breq	.+6      	; 0x71e <xTaskCreate+0xe6>
 718:	f7 01       	movw	r30, r14
 71a:	d1 83       	std	Z+1, r29	; 0x01
 71c:	c0 83       	st	Z, r28
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	f8 94       	cli
 722:	0f 92       	push	r0
 724:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <uxCurrentNumberOfTasks>
 728:	8f 5f       	subi	r24, 0xFF	; 255
 72a:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <uxCurrentNumberOfTasks>
 72e:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pxCurrentTCB>
 732:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 736:	89 2b       	or	r24, r25
 738:	89 f5       	brne	.+98     	; 0x79c <xTaskCreate+0x164>
 73a:	d0 93 4a 05 	sts	0x054A, r29	; 0x80054a <pxCurrentTCB+0x1>
 73e:	c0 93 49 05 	sts	0x0549, r28	; 0x800549 <pxCurrentTCB>
 742:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <uxCurrentNumberOfTasks>
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	c9 f5       	brne	.+114    	; 0x7bc <xTaskCreate+0x184>
 74a:	85 e2       	ldi	r24, 0x25	; 37
 74c:	95 e0       	ldi	r25, 0x05	; 5
 74e:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 752:	8e e2       	ldi	r24, 0x2E	; 46
 754:	95 e0       	ldi	r25, 0x05	; 5
 756:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 75a:	87 e3       	ldi	r24, 0x37	; 55
 75c:	95 e0       	ldi	r25, 0x05	; 5
 75e:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 762:	80 e4       	ldi	r24, 0x40	; 64
 764:	95 e0       	ldi	r25, 0x05	; 5
 766:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 76a:	8c e1       	ldi	r24, 0x1C	; 28
 76c:	95 e0       	ldi	r25, 0x05	; 5
 76e:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 772:	83 e1       	ldi	r24, 0x13	; 19
 774:	95 e0       	ldi	r25, 0x05	; 5
 776:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 77a:	86 e0       	ldi	r24, 0x06	; 6
 77c:	95 e0       	ldi	r25, 0x05	; 5
 77e:	0e 94 89 00 	call	0x112	; 0x112 <vListInitialise>
 782:	8c e1       	ldi	r24, 0x1C	; 28
 784:	95 e0       	ldi	r25, 0x05	; 5
 786:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <pxDelayedTaskList+0x1>
 78a:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <pxDelayedTaskList>
 78e:	83 e1       	ldi	r24, 0x13	; 19
 790:	95 e0       	ldi	r25, 0x05	; 5
 792:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <pxOverflowDelayedTaskList+0x1>
 796:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <pxOverflowDelayedTaskList>
 79a:	10 c0       	rjmp	.+32     	; 0x7bc <xTaskCreate+0x184>
 79c:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xSchedulerRunning>
 7a0:	81 11       	cpse	r24, r1
 7a2:	0c c0       	rjmp	.+24     	; 0x7bc <xTaskCreate+0x184>
 7a4:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxCurrentTCB>
 7a8:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 7ac:	96 89       	ldd	r25, Z+22	; 0x16
 7ae:	8e 89       	ldd	r24, Y+22	; 0x16
 7b0:	89 17       	cp	r24, r25
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <xTaskCreate+0x184>
 7b4:	d0 93 4a 05 	sts	0x054A, r29	; 0x80054a <pxCurrentTCB+0x1>
 7b8:	c0 93 49 05 	sts	0x0549, r28	; 0x800549 <pxCurrentTCB>
 7bc:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <uxTaskNumber>
 7c0:	8f 5f       	subi	r24, 0xFF	; 255
 7c2:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <uxTaskNumber>
 7c6:	8e 89       	ldd	r24, Y+22	; 0x16
 7c8:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <uxTopReadyPriority>
 7cc:	98 17       	cp	r25, r24
 7ce:	10 f4       	brcc	.+4      	; 0x7d4 <xTaskCreate+0x19c>
 7d0:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <uxTopReadyPriority>
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	9c 01       	movw	r18, r24
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	22 0f       	add	r18, r18
 7e2:	33 1f       	adc	r19, r19
 7e4:	82 0f       	add	r24, r18
 7e6:	93 1f       	adc	r25, r19
 7e8:	b6 01       	movw	r22, r12
 7ea:	8b 5d       	subi	r24, 0xDB	; 219
 7ec:	9a 4f       	sbci	r25, 0xFA	; 250
 7ee:	0e 94 9b 00 	call	0x136	; 0x136 <vListInsertEnd>
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xSchedulerRunning>
 7fa:	88 23       	and	r24, r24
 7fc:	61 f0       	breq	.+24     	; 0x816 <xTaskCreate+0x1de>
 7fe:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxCurrentTCB>
 802:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 806:	96 89       	ldd	r25, Z+22	; 0x16
 808:	8e 89       	ldd	r24, Y+22	; 0x16
 80a:	98 17       	cp	r25, r24
 80c:	30 f4       	brcc	.+12     	; 0x81a <xTaskCreate+0x1e2>
 80e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <vPortYield>
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	05 c0       	rjmp	.+10     	; 0x820 <xTaskCreate+0x1e8>
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	03 c0       	rjmp	.+6      	; 0x820 <xTaskCreate+0x1e8>
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	01 c0       	rjmp	.+2      	; 0x820 <xTaskCreate+0x1e8>
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	df 91       	pop	r29
 822:	cf 91       	pop	r28
 824:	0f 91       	pop	r16
 826:	ff 90       	pop	r15
 828:	ef 90       	pop	r14
 82a:	df 90       	pop	r13
 82c:	cf 90       	pop	r12
 82e:	bf 90       	pop	r11
 830:	af 90       	pop	r10
 832:	9f 90       	pop	r9
 834:	8f 90       	pop	r8
 836:	7f 90       	pop	r7
 838:	6f 90       	pop	r6
 83a:	5f 90       	pop	r5
 83c:	4f 90       	pop	r4
 83e:	08 95       	ret

00000840 <vTaskStartScheduler>:
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	0f 2e       	mov	r0, r31
 848:	f9 ef       	ldi	r31, 0xF9	; 249
 84a:	ef 2e       	mov	r14, r31
 84c:	f4 e0       	ldi	r31, 0x04	; 4
 84e:	ff 2e       	mov	r15, r31
 850:	f0 2d       	mov	r31, r0
 852:	00 e0       	ldi	r16, 0x00	; 0
 854:	20 e0       	ldi	r18, 0x00	; 0
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	40 e5       	ldi	r20, 0x50	; 80
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	66 e0       	ldi	r22, 0x06	; 6
 85e:	71 e0       	ldi	r23, 0x01	; 1
 860:	80 ed       	ldi	r24, 0xD0	; 208
 862:	92 e0       	ldi	r25, 0x02	; 2
 864:	0e 94 1c 03 	call	0x638	; 0x638 <xTaskCreate>
 868:	81 30       	cpi	r24, 0x01	; 1
 86a:	81 f4       	brne	.+32     	; 0x88c <vTaskStartScheduler+0x4c>
 86c:	f8 94       	cli
 86e:	8f ef       	ldi	r24, 0xFF	; 255
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <xNextTaskUnblockTime+0x1>
 876:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <xNextTaskUnblockTime>
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <xSchedulerRunning>
 880:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <xTickCount+0x1>
 884:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <xTickCount>
 888:	0e 94 be 01 	call	0x37c	; 0x37c <xPortStartScheduler>
 88c:	0f 91       	pop	r16
 88e:	ff 90       	pop	r15
 890:	ef 90       	pop	r14
 892:	08 95       	ret

00000894 <vTaskSuspendAll>:
 894:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <uxSchedulerSuspended>
 898:	8f 5f       	subi	r24, 0xFF	; 255
 89a:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <uxSchedulerSuspended>
 89e:	08 95       	ret

000008a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8a0:	cf 92       	push	r12
 8a2:	df 92       	push	r13
 8a4:	ef 92       	push	r14
 8a6:	ff 92       	push	r15
 8a8:	0f 93       	push	r16
 8aa:	1f 93       	push	r17
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8b0:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <uxSchedulerSuspended>
 8b4:	81 11       	cpse	r24, r1
 8b6:	99 c0       	rjmp	.+306    	; 0x9ea <__stack+0xeb>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8b8:	e0 90 03 05 	lds	r14, 0x0503	; 0x800503 <xTickCount>
 8bc:	f0 90 04 05 	lds	r15, 0x0504	; 0x800504 <xTickCount+0x1>
 8c0:	8f ef       	ldi	r24, 0xFF	; 255
 8c2:	e8 1a       	sub	r14, r24
 8c4:	f8 0a       	sbc	r15, r24

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8c6:	f0 92 04 05 	sts	0x0504, r15	; 0x800504 <xTickCount+0x1>
 8ca:	e0 92 03 05 	sts	0x0503, r14	; 0x800503 <xTickCount>

		if( xConstTickCount == ( TickType_t ) 0U )
 8ce:	e1 14       	cp	r14, r1
 8d0:	f1 04       	cpc	r15, r1
 8d2:	b9 f4       	brne	.+46     	; 0x902 <__stack+0x3>
		{
			taskSWITCH_DELAYED_LISTS();
 8d4:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <pxDelayedTaskList>
 8d8:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <pxDelayedTaskList+0x1>
 8dc:	20 91 0f 05 	lds	r18, 0x050F	; 0x80050f <pxOverflowDelayedTaskList>
 8e0:	30 91 10 05 	lds	r19, 0x0510	; 0x800510 <pxOverflowDelayedTaskList+0x1>
 8e4:	30 93 12 05 	sts	0x0512, r19	; 0x800512 <pxDelayedTaskList+0x1>
 8e8:	20 93 11 05 	sts	0x0511, r18	; 0x800511 <pxDelayedTaskList>
 8ec:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <pxOverflowDelayedTaskList+0x1>
 8f0:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <pxOverflowDelayedTaskList>
 8f4:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <xNumOfOverflows>
 8f8:	8f 5f       	subi	r24, 0xFF	; 255
 8fa:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <xNumOfOverflows>
 8fe:	0e 94 b1 02 	call	0x562	; 0x562 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 902:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <xNextTaskUnblockTime>
 906:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <xNextTaskUnblockTime+0x1>
 90a:	e8 16       	cp	r14, r24
 90c:	f9 06       	cpc	r15, r25
 90e:	10 f4       	brcc	.+4      	; 0x914 <__stack+0x15>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 910:	d1 2c       	mov	r13, r1
 912:	53 c0       	rjmp	.+166    	; 0x9ba <__stack+0xbb>
 914:	d1 2c       	mov	r13, r1
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 916:	cc 24       	eor	r12, r12
 918:	c3 94       	inc	r12
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 91a:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <pxDelayedTaskList>
 91e:	f0 91 12 05 	lds	r31, 0x0512	; 0x800512 <pxDelayedTaskList+0x1>
 922:	90 81       	ld	r25, Z
 924:	91 11       	cpse	r25, r1
 926:	07 c0       	rjmp	.+14     	; 0x936 <__stack+0x37>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 928:	8f ef       	ldi	r24, 0xFF	; 255
 92a:	9f ef       	ldi	r25, 0xFF	; 255
 92c:	90 93 fc 04 	sts	0x04FC, r25	; 0x8004fc <xNextTaskUnblockTime+0x1>
 930:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <xNextTaskUnblockTime>
					break;
 934:	42 c0       	rjmp	.+132    	; 0x9ba <__stack+0xbb>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 936:	e0 91 11 05 	lds	r30, 0x0511	; 0x800511 <pxDelayedTaskList>
 93a:	f0 91 12 05 	lds	r31, 0x0512	; 0x800512 <pxDelayedTaskList+0x1>
 93e:	05 80       	ldd	r0, Z+5	; 0x05
 940:	f6 81       	ldd	r31, Z+6	; 0x06
 942:	e0 2d       	mov	r30, r0
 944:	c6 81       	ldd	r28, Z+6	; 0x06
 946:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 948:	2a 81       	ldd	r18, Y+2	; 0x02
 94a:	3b 81       	ldd	r19, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
 94c:	e2 16       	cp	r14, r18
 94e:	f3 06       	cpc	r15, r19
 950:	28 f4       	brcc	.+10     	; 0x95c <__stack+0x5d>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 952:	30 93 fc 04 	sts	0x04FC, r19	; 0x8004fc <xNextTaskUnblockTime+0x1>
 956:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <xNextTaskUnblockTime>
						break;
 95a:	2f c0       	rjmp	.+94     	; 0x9ba <__stack+0xbb>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 95c:	8e 01       	movw	r16, r28
 95e:	0e 5f       	subi	r16, 0xFE	; 254
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	c8 01       	movw	r24, r16
 964:	0e 94 ed 00 	call	0x1da	; 0x1da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 968:	8c 89       	ldd	r24, Y+20	; 0x14
 96a:	9d 89       	ldd	r25, Y+21	; 0x15
 96c:	89 2b       	or	r24, r25
 96e:	21 f0       	breq	.+8      	; 0x978 <__stack+0x79>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 970:	ce 01       	movw	r24, r28
 972:	0c 96       	adiw	r24, 0x0c	; 12
 974:	0e 94 ed 00 	call	0x1da	; 0x1da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 978:	2e 89       	ldd	r18, Y+22	; 0x16
 97a:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <uxTopReadyPriority>
 97e:	82 17       	cp	r24, r18
 980:	10 f4       	brcc	.+4      	; 0x986 <__stack+0x87>
 982:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <uxTopReadyPriority>
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	c9 01       	movw	r24, r18
 98a:	88 0f       	add	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	88 0f       	add	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	82 0f       	add	r24, r18
 998:	93 1f       	adc	r25, r19
 99a:	b8 01       	movw	r22, r16
 99c:	8b 5d       	subi	r24, 0xDB	; 219
 99e:	9a 4f       	sbci	r25, 0xFA	; 250
 9a0:	0e 94 9b 00 	call	0x136	; 0x136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 9a4:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxCurrentTCB>
 9a8:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 9ac:	9e 89       	ldd	r25, Y+22	; 0x16
 9ae:	86 89       	ldd	r24, Z+22	; 0x16
 9b0:	98 17       	cp	r25, r24
 9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__stack+0xb7>
 9b4:	b2 cf       	rjmp	.-156    	; 0x91a <__stack+0x1b>
						{
							xSwitchRequired = pdTRUE;
 9b6:	dc 2c       	mov	r13, r12
 9b8:	b0 cf       	rjmp	.-160    	; 0x91a <__stack+0x1b>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 9ba:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxCurrentTCB>
 9be:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 9c2:	86 89       	ldd	r24, Z+22	; 0x16
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	fc 01       	movw	r30, r24
 9c8:	ee 0f       	add	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	ee 0f       	add	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	8e 0f       	add	r24, r30
 9d6:	9f 1f       	adc	r25, r31
 9d8:	fc 01       	movw	r30, r24
 9da:	eb 5d       	subi	r30, 0xDB	; 219
 9dc:	fa 4f       	sbci	r31, 0xFA	; 250
 9de:	80 81       	ld	r24, Z
 9e0:	82 30       	cpi	r24, 0x02	; 2
 9e2:	48 f0       	brcs	.+18     	; 0x9f6 <__stack+0xf7>
			{
				xSwitchRequired = pdTRUE;
 9e4:	dd 24       	eor	r13, r13
 9e6:	d3 94       	inc	r13
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 9ea:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <uxPendedTicks>
 9ee:	8f 5f       	subi	r24, 0xFF	; 255
 9f0:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <uxPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 9f4:	d1 2c       	mov	r13, r1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 9f6:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <xYieldPending>
 9fa:	88 23       	and	r24, r24
 9fc:	11 f0       	breq	.+4      	; 0xa02 <__stack+0x103>
		{
			xSwitchRequired = pdTRUE;
 9fe:	dd 24       	eor	r13, r13
 a00:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 a02:	8d 2d       	mov	r24, r13
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	1f 91       	pop	r17
 a0a:	0f 91       	pop	r16
 a0c:	ff 90       	pop	r15
 a0e:	ef 90       	pop	r14
 a10:	df 90       	pop	r13
 a12:	cf 90       	pop	r12
 a14:	08 95       	ret

00000a16 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 a16:	df 92       	push	r13
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	f8 94       	cli
 a28:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
 a2a:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <uxSchedulerSuspended>
 a2e:	81 50       	subi	r24, 0x01	; 1
 a30:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 a34:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <uxSchedulerSuspended>
 a38:	81 11       	cpse	r24, r1
 a3a:	5f c0       	rjmp	.+190    	; 0xafa <xTaskResumeAll+0xe4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 a3c:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <uxCurrentNumberOfTasks>
 a40:	81 11       	cpse	r24, r1
 a42:	33 c0       	rjmp	.+102    	; 0xaaa <xTaskResumeAll+0x94>
 a44:	5d c0       	rjmp	.+186    	; 0xb00 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 a46:	d7 01       	movw	r26, r14
 a48:	15 96       	adiw	r26, 0x05	; 5
 a4a:	ed 91       	ld	r30, X+
 a4c:	fc 91       	ld	r31, X
 a4e:	16 97       	sbiw	r26, 0x06	; 6
 a50:	c6 81       	ldd	r28, Z+6	; 0x06
 a52:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 a54:	ce 01       	movw	r24, r28
 a56:	0c 96       	adiw	r24, 0x0c	; 12
 a58:	0e 94 ed 00 	call	0x1da	; 0x1da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 a5c:	8e 01       	movw	r16, r28
 a5e:	0e 5f       	subi	r16, 0xFE	; 254
 a60:	1f 4f       	sbci	r17, 0xFF	; 255
 a62:	c8 01       	movw	r24, r16
 a64:	0e 94 ed 00 	call	0x1da	; 0x1da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 a68:	2e 89       	ldd	r18, Y+22	; 0x16
 a6a:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <uxTopReadyPriority>
 a6e:	82 17       	cp	r24, r18
 a70:	10 f4       	brcc	.+4      	; 0xa76 <xTaskResumeAll+0x60>
 a72:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <uxTopReadyPriority>
 a76:	30 e0       	ldi	r19, 0x00	; 0
 a78:	c9 01       	movw	r24, r18
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	82 0f       	add	r24, r18
 a88:	93 1f       	adc	r25, r19
 a8a:	b8 01       	movw	r22, r16
 a8c:	8b 5d       	subi	r24, 0xDB	; 219
 a8e:	9a 4f       	sbci	r25, 0xFA	; 250
 a90:	0e 94 9b 00 	call	0x136	; 0x136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 a94:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxCurrentTCB>
 a98:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxCurrentTCB+0x1>
 a9c:	9e 89       	ldd	r25, Y+22	; 0x16
 a9e:	86 89       	ldd	r24, Z+22	; 0x16
 aa0:	98 17       	cp	r25, r24
 aa2:	68 f0       	brcs	.+26     	; 0xabe <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 aa4:	d0 92 ff 04 	sts	0x04FF, r13	; 0x8004ff <xYieldPending>
 aa8:	0a c0       	rjmp	.+20     	; 0xabe <xTaskResumeAll+0xa8>
 aaa:	c0 e0       	ldi	r28, 0x00	; 0
 aac:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 aae:	0f 2e       	mov	r0, r31
 ab0:	f6 e0       	ldi	r31, 0x06	; 6
 ab2:	ef 2e       	mov	r14, r31
 ab4:	f5 e0       	ldi	r31, 0x05	; 5
 ab6:	ff 2e       	mov	r15, r31
 ab8:	f0 2d       	mov	r31, r0

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
 aba:	dd 24       	eor	r13, r13
 abc:	d3 94       	inc	r13
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 abe:	f7 01       	movw	r30, r14
 ac0:	80 81       	ld	r24, Z
 ac2:	81 11       	cpse	r24, r1
 ac4:	c0 cf       	rjmp	.-128    	; 0xa46 <xTaskResumeAll+0x30>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 ac6:	cd 2b       	or	r28, r29
 ac8:	11 f0       	breq	.+4      	; 0xace <xTaskResumeAll+0xb8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 aca:	0e 94 b1 02 	call	0x562	; 0x562 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 ace:	c0 91 00 05 	lds	r28, 0x0500	; 0x800500 <uxPendedTicks>

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 ad2:	cc 23       	and	r28, r28
 ad4:	51 f0       	breq	.+20     	; 0xaea <xTaskResumeAll+0xd4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 ad6:	d1 e0       	ldi	r29, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 ad8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <xTaskIncrementTick>
 adc:	81 11       	cpse	r24, r1
							{
								xYieldPending = pdTRUE;
 ade:	d0 93 ff 04 	sts	0x04FF, r29	; 0x8004ff <xYieldPending>
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 ae2:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <xTaskResumeAll+0xc2>

						uxPendedTicks = 0;
 ae6:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <uxPendedTicks>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 aea:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <xYieldPending>
 aee:	88 23       	and	r24, r24
 af0:	31 f0       	breq	.+12     	; 0xafe <xTaskResumeAll+0xe8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 af2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <xTaskResumeAll+0xea>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	01 c0       	rjmp	.+2      	; 0xb00 <xTaskResumeAll+0xea>
 afe:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 b00:	0f 90       	pop	r0
 b02:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
 b04:	df 91       	pop	r29
 b06:	cf 91       	pop	r28
 b08:	1f 91       	pop	r17
 b0a:	0f 91       	pop	r16
 b0c:	ff 90       	pop	r15
 b0e:	ef 90       	pop	r14
 b10:	df 90       	pop	r13
 b12:	08 95       	ret

00000b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b1a:	89 2b       	or	r24, r25
 b1c:	51 f0       	breq	.+20     	; 0xb32 <vTaskDelay+0x1e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b1e:	0e 94 4a 04 	call	0x894	; 0x894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	ce 01       	movw	r24, r28
 b26:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 b2a:	0e 94 0b 05 	call	0xa16	; 0xa16 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b2e:	81 11       	cpse	r24, r1
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <vTaskDelay+0x22>
		{
			portYIELD_WITHIN_API();
 b32:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	08 95       	ret

00000b3c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b3c:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <uxSchedulerSuspended>
 b40:	88 23       	and	r24, r24
 b42:	21 f0       	breq	.+8      	; 0xb4c <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	80 93 ff 04 	sts	0x04FF, r24	; 0x8004ff <xYieldPending>
 b4a:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 b4c:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 b50:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <uxTopReadyPriority>
 b54:	82 2f       	mov	r24, r18
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	fc 01       	movw	r30, r24
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	ee 0f       	add	r30, r30
 b60:	ff 1f       	adc	r31, r31
 b62:	ee 0f       	add	r30, r30
 b64:	ff 1f       	adc	r31, r31
 b66:	e8 0f       	add	r30, r24
 b68:	f9 1f       	adc	r31, r25
 b6a:	eb 5d       	subi	r30, 0xDB	; 219
 b6c:	fa 4f       	sbci	r31, 0xFA	; 250
 b6e:	30 81       	ld	r19, Z
 b70:	31 11       	cpse	r19, r1
 b72:	11 c0       	rjmp	.+34     	; 0xb96 <vTaskSwitchContext+0x5a>
 b74:	21 50       	subi	r18, 0x01	; 1
 b76:	82 2f       	mov	r24, r18
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	fc 01       	movw	r30, r24
 b7c:	ee 0f       	add	r30, r30
 b7e:	ff 1f       	adc	r31, r31
 b80:	ee 0f       	add	r30, r30
 b82:	ff 1f       	adc	r31, r31
 b84:	ee 0f       	add	r30, r30
 b86:	ff 1f       	adc	r31, r31
 b88:	e8 0f       	add	r30, r24
 b8a:	f9 1f       	adc	r31, r25
 b8c:	eb 5d       	subi	r30, 0xDB	; 219
 b8e:	fa 4f       	sbci	r31, 0xFA	; 250
 b90:	30 81       	ld	r19, Z
 b92:	33 23       	and	r19, r19
 b94:	79 f3       	breq	.-34     	; 0xb74 <vTaskSwitchContext+0x38>
 b96:	ac 01       	movw	r20, r24
 b98:	44 0f       	add	r20, r20
 b9a:	55 1f       	adc	r21, r21
 b9c:	44 0f       	add	r20, r20
 b9e:	55 1f       	adc	r21, r21
 ba0:	44 0f       	add	r20, r20
 ba2:	55 1f       	adc	r21, r21
 ba4:	48 0f       	add	r20, r24
 ba6:	59 1f       	adc	r21, r25
 ba8:	da 01       	movw	r26, r20
 baa:	ab 5d       	subi	r26, 0xDB	; 219
 bac:	ba 4f       	sbci	r27, 0xFA	; 250
 bae:	11 96       	adiw	r26, 0x01	; 1
 bb0:	ed 91       	ld	r30, X+
 bb2:	fc 91       	ld	r31, X
 bb4:	12 97       	sbiw	r26, 0x02	; 2
 bb6:	02 80       	ldd	r0, Z+2	; 0x02
 bb8:	f3 81       	ldd	r31, Z+3	; 0x03
 bba:	e0 2d       	mov	r30, r0
 bbc:	12 96       	adiw	r26, 0x02	; 2
 bbe:	fc 93       	st	X, r31
 bc0:	ee 93       	st	-X, r30
 bc2:	11 97       	sbiw	r26, 0x01	; 1
 bc4:	48 5d       	subi	r20, 0xD8	; 216
 bc6:	5a 4f       	sbci	r21, 0xFA	; 250
 bc8:	e4 17       	cp	r30, r20
 bca:	f5 07       	cpc	r31, r21
 bcc:	29 f4       	brne	.+10     	; 0xbd8 <vTaskSwitchContext+0x9c>
 bce:	42 81       	ldd	r20, Z+2	; 0x02
 bd0:	53 81       	ldd	r21, Z+3	; 0x03
 bd2:	fd 01       	movw	r30, r26
 bd4:	52 83       	std	Z+2, r21	; 0x02
 bd6:	41 83       	std	Z+1, r20	; 0x01
 bd8:	fc 01       	movw	r30, r24
 bda:	ee 0f       	add	r30, r30
 bdc:	ff 1f       	adc	r31, r31
 bde:	ee 0f       	add	r30, r30
 be0:	ff 1f       	adc	r31, r31
 be2:	ee 0f       	add	r30, r30
 be4:	ff 1f       	adc	r31, r31
 be6:	8e 0f       	add	r24, r30
 be8:	9f 1f       	adc	r25, r31
 bea:	fc 01       	movw	r30, r24
 bec:	eb 5d       	subi	r30, 0xDB	; 219
 bee:	fa 4f       	sbci	r31, 0xFA	; 250
 bf0:	01 80       	ldd	r0, Z+1	; 0x01
 bf2:	f2 81       	ldd	r31, Z+2	; 0x02
 bf4:	e0 2d       	mov	r30, r0
 bf6:	86 81       	ldd	r24, Z+6	; 0x06
 bf8:	97 81       	ldd	r25, Z+7	; 0x07
 bfa:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pxCurrentTCB+0x1>
 bfe:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pxCurrentTCB>
 c02:	20 93 02 05 	sts	0x0502, r18	; 0x800502 <uxTopReadyPriority>
 c06:	08 95       	ret

00000c08 <_exit>:
 c08:	f8 94       	cli

00000c0a <__stop_program>:
 c0a:	ff cf       	rjmp	.-2      	; 0xc0a <__stop_program>
